import tkinter as tk
from tkinter import ttk, messagebox


class DeveloperGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Developer Information")

        self.developers = []  # List to store developer information

        # Labels and Entry widgets for developer information
        self.label_name = tk.Label(master, text="Developer Name:")
        self.entry_name = tk.Entry(master)

        self.label_skills = tk.Label(master, text="Skills:")
        self.entry_skills = tk.Entry(master)

        self.label_project = tk.Label(master, text="Project Name:")
        self.entry_project = tk.Entry(master)

        # Buttons for CRUD operations
        self.button_insert = tk.Button(master, text="Insert", command=self.insert_developer)
        self.button_update = tk.Button(master, text="Update", command=self.update_developer)
        self.button_delete = tk.Button(master, text="Delete", command=self.delete_developer)
        self.button_project_details=tk.Button(master, text="Project Details", command=self.open_Project_Details_GUI)

        # Treeview to display developers details
        self.tree = ttk.Treeview(master, columns=("Developer Name", "Skills", "Project Name"), show="headings")
        self.tree.heading("Developer Name", text="Developer Name")
        self.tree.heading("Skills", text="Skills")
        self.tree.heading("Project Name", text="Project Name")
        self.tree.bind("<ButtonRelease-1>", self.load_developer_info)

        # Arrange widgets using grid layout
        self.label_name.grid(row=0, column=0, padx=5, pady=5)
        self.entry_name.grid(row=0, column=1, padx=5, pady=5)
        self.label_skills.grid(row=1, column=0, padx=5, pady=5)
        self.entry_skills.grid(row=1, column=1, padx=5, pady=5)
        self.label_project.grid(row=2, column=0, padx=5, pady=5)
        self.entry_project.grid(row=2, column=1, padx=5, pady=5)

        self.button_insert.grid(row=3, column=0, columnspan=2, pady=10)
        self.button_update.grid(row=4, column=0, columnspan=2, pady=10)
        self.button_delete.grid(row=5, column=0, columnspan=2, pady=10)
        self.button_project_details.grid(row=7,column=0,columnspan=2)

        self.tree.grid(row=0, column=2, rowspan=6, padx=10)

    def insert_developer(self):
        name = self.entry_name.get()
        skills = self.entry_skills.get()
        project_name = self.entry_project.get()

        if name and skills and project_name:
            self.developers.append({"Developer Name": name, "Skills": skills, "Project Name": project_name})
            self.update_treeview()
            self.clear_entries()
        else:
            messagebox.showwarning("Incomplete Information", "Please enter all details.")

    def update_developer(self):
        selected_item = self.tree.selection()
        if selected_item:
            item = selected_item[0]
            name = self.entry_name.get()
            skills = self.entry_skills.get()
            project_name = self.entry_project.get()

            if name and skills and project_name:
                self.developers[self.get_selected_index(item)] = {"Developer Name": name, "Skills": skills,
                                                                  "Project Name": project_name}
                self.update_treeview()
                self.clear_entries()
            else:
                messagebox.showwarning("Incomplete Information", "Please enter all details.")
        else:
            messagebox.showwarning("No Developer Selected", "Please select a developer from the list.")

    def delete_developer(self):
        selected_item = self.tree.selection()
        if selected_item:
            item = selected_item[0]
            del self.developers[self.get_selected_index(item)]
            self.update_treeview()
            self.clear_entries()
        else:
            messagebox.showwarning("No Developer Selected", "Please select a developer from the list.")

    def load_developer_info(self, event):
        selected_item = self.tree.selection()
        if selected_item:
            item = selected_item[0]
            developer = self.developers[self.get_selected_index(item)]
            self.entry_name.delete(0, tk.END)
            self.entry_name.insert(0, developer["Developer Name"])
            self.entry_skills.delete(0, tk.END)
            self.entry_skills.insert(0, developer["Skills"])
            self.entry_project.delete(0, tk.END)
            self.entry_project.insert(0, developer["Project Name"])

    def update_treeview(self):
        # Clear the treeview and populate it with developer details
        for i in self.tree.get_children():
            self.tree.delete(i)
        for developer in self.developers:
            self.tree.insert("", "end",
                             values=(developer["Developer Name"], developer["Skills"], developer["Project Name"]))

    def clear_entries(self):
        # Clear entry fields
        self.entry_name.delete(0, tk.END)
        self.entry_skills.delete(0, tk.END)
        self.entry_project.delete(0, tk.END)

    def get_selected_index(self, item):
        index = self.tree.index(item)
        return index if index >= 0 else None
    def open_Project_Details_GUI(self):
        project_details_window=tk.Toplevel(self.master)
        project_details_app=ProjectGUI(project_details_window)

class ProjectGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Project Information")

        self.projects = []  # List to store project information

        # Labels and Entry widgets for project information
        self.label_project_name = tk.Label(master, text="Project Name:")
        self.entry_project_name = tk.Entry(master)

        self.label_project_type = tk.Label(master, text="Project Type:")
        self.entry_project_type = tk.Entry(master)

        self.label_technology_used = tk.Label(master, text="Technology Used:")
        self.entry_technology_used = tk.Entry(master)

        self.label_developer_name = tk.Label(master, text="Developer Name:")
        self.entry_developer_name = tk.Entry(master)

        # Buttons for CRUD operations
        self.button_insert = tk.Button(master, text="Insert", command=self.insert_project)
        self.button_update = tk.Button(master, text="Update", command=self.update_project)
        self.button_delete = tk.Button(master, text="Delete", command=self.delete_project)

        # Treeview to display project details
        self.tree = ttk.Treeview(master, columns=("Project Name", "Project Type", "Technology Used", "Developer Name"),
                                 show="headings")
        self.tree.heading("Project Name", text="Project Name")
        self.tree.heading("Project Type", text="Project Type")
        self.tree.heading("Technology Used", text="Technology Used")
        self.tree.heading("Developer Name", text="Developer Name")
        self.tree.bind("<ButtonRelease-1>", self.load_project_info)

        # Arrange widgets using grid layout
        self.label_project_name.grid(row=0, column=0, padx=5, pady=5)
        self.entry_project_name.grid(row=0, column=1, padx=5, pady=5)
        self.label_project_type.grid(row=1, column=0, padx=5, pady=5)
        self.entry_project_type.grid(row=1, column=1, padx=5, pady=5)
        self.label_technology_used.grid(row=2, column=0, padx=5, pady=5)
        self.entry_technology_used.grid(row=2, column=1, padx=5, pady=5)
        self.label_developer_name.grid(row=3, column=0, padx=5, pady=5)
        self.entry_developer_name.grid(row=3, column=1, padx=5, pady=5)

        self.button_insert.grid(row=4, column=0, columnspan=2, pady=10)
        self.button_update.grid(row=5, column=0, columnspan=2, pady=10)
        self.button_delete.grid(row=6, column=0, columnspan=2, pady=10)

        self.tree.grid(row=0, column=2, rowspan=6, padx=10)

    def insert_project(self):
        project_name = self.entry_project_name.get()
        project_type = self.entry_project_type.get()
        technology_used = self.entry_technology_used.get()
        developer_name = self.entry_developer_name.get()

        if project_name and project_type and technology_used and developer_name:
            self.projects.append(
                {"Project Name": project_name, "Project Type": project_type, "Technology Used": technology_used,
                 "Developer Name": developer_name})
            self.update_treeview()
            self.clear_entries()
        else:
            messagebox.showwarning("Incomplete Information", "Please enter all details.")

    def update_project(self):
        selected_item = self.tree.selection()
        if selected_item:
            item = selected_item[0]
            project_name = self.entry_project_name.get()
            project_type = self.entry_project_type.get()
            technology_used = self.entry_technology_used.get()
            developer_name = self.entry_developer_name.get()

            if project_name and project_type and technology_used and developer_name:
                self.projects[self.get_selected_index(item)] = {"Project Name": project_name,
                                                                "Project Type": project_type,
                                                                "Technology Used": technology_used,
                                                                "Developer Name": developer_name}
                self.update_treeview()
                self.clear_entries()
            else:
                messagebox.showwarning("Incomplete Information", "Please enter all details.")
        else:
            messagebox.showwarning("No Project Selected", "Please select a project from the list.")

    def delete_project(self):
        selected_item = self.tree.selection()
        if selected_item:
            item = selected_item[0]
            del self.projects[self.get_selected_index(item)]
            self.update_treeview()
            self.clear_entries()
        else:
            messagebox.showwarning("No Project Selected", "Please select a project from the list.")

    def load_project_info(self, event):
        selected_item = self.tree.selection()
        if selected_item:
            item = selected_item[0]
            project = self.projects[self.get_selected_index(item)]
            self.entry_project_name.delete(0, tk.END)
            self.entry_project_name.insert(0, project["Project Name"])
            self.entry_project_type.delete(0, tk.END)
            self.entry_project_type.insert(0, project["Project Type"])
            self.entry_technology_used.delete(0, tk.END)
            self.entry_technology_used.insert(0, project["Technology Used"])
            self.entry_developer_name.delete(0, tk.END)
            self.entry_developer_name.insert(0, project["Developer Name"])

    def update_treeview(self):
        # Clear the treeview and populate it with project details
        for i in self.tree.get_children():
            self.tree.delete(i)
        for project in self.projects:
            self.tree.insert("", "end", values=(
            project["Project Name"], project["Project Type"], project["Technology Used"], project["Developer Name"]))

    def clear_entries(self):
        # Clear entry fields
        self.entry_project_name.delete(0, tk.END)
        self.entry_project_type.delete(0, tk.END)
        self.entry_technology_used.delete(0, tk.END)
        self.entry_developer_name.delete(0, tk.END)

    def get_selected_index(self, item):
        index = self.tree.index(item)
        return index if index >= 0 else None



if __name__ == "__main__":
    root = tk.Tk()
    app = DeveloperGUI(root)
    root.mainloop()
